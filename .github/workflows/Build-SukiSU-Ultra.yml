name: Build SukiSU Ultra
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支（SoC平台）"
        type: choice
        required: true
        default: sm8550
        # CPU_OPTIONS_START
        options:
          - sm6375
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8635
          - sm8650
          - sm8750
        # CPU_OPTIONS_END
      FEIL:
        description: "配置文件"
        type: choice
        required: true
        default: ""
        # FEIL_OPTIONS_START
        options:
        # FEIL_OPTIONS_END
      CPUD:
        description: "处理器代号"
        type: choice
        required: true
        default: kalama
        options:
          - pineapple
          - blair
          - crow
          - waipio
          - kalama
          - sun
      ANDROID_VERSION:
        description: "内核安卓版本"
        type: choice
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
        description: "内核版本"
        type: choice
        required: true
        default: "5.15"
        options:
          - "5.10"
          - "5.15"
          - "6.1"
          - "6.6"
      KPM:
        description: "是否启用KPM"
        type: boolean
        required: true
        default: false
      ZRAM:
        description: "是否启用更多ZRAM算法"
        type: boolean
        required: true
        default: true
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
    steps:
      - name: 最大化构建空间
        if: ${{ github.event.inputs.KERNEL_VERSION != '6.1' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      - name: 设置缓存环境
        run: |
          # 设置机型隔离缓存目录 #
          echo "CCACHE_DIR=$HOME/.ccache_${{ github.event.inputs.FEIL }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache_${{ github.event.inputs.FEIL }}"
          echo "缓存目录: $HOME/.ccache_${{ github.event.inputs.FEIL }}"
      - name: "配置Git账户"
        run: |
          # 配置Git用户信息 #
          git config --global user.name "build"
          git config --global user.email "qq441791056@163.com"
      - name: "配置APT缓存"
        run: |
          # 设置APT缓存目录 #
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          # 创建APT配置文件
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"
      - name: "恢复APT缓存"
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build SukiSU Ultra.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-
      - name: "安装构建依赖"
        run: |
          # 安装编译依赖项 #
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          # 更新包列表并安装必要工具 #
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
      - name: "恢复ccache缓存"
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ github.event.inputs.FEIL }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.event.inputs.FEIL }}-
            ccache-${{ runner.os }}-
      - name: "初始化ccache"
        run: |
          # 初始化ccache
          INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"

          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              mkdir -p "${{ env.CCACHE_DIR }}"
              ccache -M ${{ env.CCACHE_MAXSIZE }}
              touch "$INIT_FLAG"
              echo "ccache初始化完成"
            else
              echo "ccache已存在，跳过初始化"
            fi
          else
            echo "未找到ccache命令，跳过初始化"
          fi
          # 显示缓存统计
          ccache -s
          echo "ccache初始化流程完成"
      - name: 初始化repo
        run: |
          # 下载repo工具 #
          mkdir -p kernel_workspace
          curl -fsSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          echo "repo工具安装完成"
      - name: "克隆内核源码"
        run: "# 初始化内核仓库 #\nmkdir kernel_workspace && cd kernel_workspace\n\nrepo init -u https://github.com/OnePlusOSS/kernel_manifest.git \\\n  -b refs/heads/oneplus/${{ github.event.inputs.CPU }} \\\n  -m ${{ github.event.inputs.FEIL }}.xml --depth=1\n# 使用最大线程同步代码库 #\nrepo sync -c -j$(nproc --all) --no-tags --no-clone-bundle --force-sync\n\n# 清理abi导出和-dirty标记\necho \"Kernel version:-${{ github.event.inputs.ANDROID_VERSION }}-furlc\"\nrm kernel_platform/common/android/abi_gki_protected_exports_* || echo \"No protected exports!\"\nrm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo \"No protected exports!\"\nsed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion\nsed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion\nsed -i 's/ -dirty//g' kernel_platform/external/dtc/scripts/setlocalversion\nsed -i '$i res=$(echo \"$res\" | sed '\\''s/-dirty//g'\\'')' kernel_platform/common/scripts/setlocalversion\nsed -i '$i res=$(echo \"$res\" | sed '\\''s/-dirty//g'\\'')' kernel_platform/msm-kernel/scripts/setlocalversion\nsed -i '$i res=$(echo \"$res\" | sed '\\''s/-dirty//g'\\'')' kernel_platform/external/dtc/scripts/setlocalversion\nsed -i '$s|echo \"\\$res\"|echo \"-${{ github.event.inputs.ANDROID_VERSION }}-furlc\"|' kernel_platform/common/scripts/setlocalversion            \nsed -i '$s|echo \"\\$res\"|echo \"-${{ github.event.inputs.ANDROID_VERSION }}-furlc\"|' kernel_platform/msm-kernel/scripts/setlocalversion\nsed -i '$s|echo \"\\$res\"|echo \"-${{ github.event.inputs.ANDROID_VERSION }}-furlc\"|' kernel_platform/external/dtc/scripts/setlocalversion\n"
      - name: 注入KernelSU-SukiSU Ultra
        run: "# 设置SukiSU Ultra #\nmkdir -p kernel_workspace/kernel_platform\n\ncd kernel_workspace/kernel_platform\n# 下载并执行设置脚本 #\ncurl -LSs \"https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh\" | bash -s susfs-main\n\ncd KernelSU\n# 下载KernelSU设置工具 #\ncurl -L -o sukisu_setup.bin \nchmod +x sukisu_setup.bin\n\n# 验证Makefile存在\nif [ ! -f \"kernel/Makefile\" ]; then\n  echo \"Error：缺少kernel/Makefile\"\n  ls -la\n  exit 1\nfi\n\n./sukisu_setup.bin\nrm -rf ./sukisu_setup.bin\n\necho \"SukiSU Ultra配置完成\"\n"
      - name: 设置susfs并应用主补丁
        run: |
          set -e
          # 下载相关内容
          cd kernel_workspace
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git \
            -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki.patch
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki_c99fix.patch
          # 添加susfs补丁
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./common/
          cp ../SukiSU_patch/69_hide_stuff.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          # 添加oki补丁
          cp ../ogki2gki.patch ./common/
          cp ../ogki2gki_c99fix.patch ./common/
          # 添加zram补丁
          if [[ "${{ github.event.inputs.ZRAM }}" == "true" ]]; then
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          fi

          cd ./common/
          PATCH_FILE=50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch
          if [[ -f "$PATCH_FILE" ]]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
            sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
            patch -p1 < "$PATCH_FILE" || true
          fi
          # 应用susfs补丁
          patch -p1 -F 3 < syscall_hooks.patch || true
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < ogki2gki_c99fix.patch
          echo "✅ SUSFS 和 syscall_hooks patch 应用完成"
      - name: 应用zram相关补丁
        run: "set -e\ncd kernel_workspace/kernel_platform/common\nPATCH_LIST=(\n  \"lz4kd\"\n  \"lz4k_oplus\"\n)\nPATCH_BASE=../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}\nfor PATCH_NAME in \"${PATCH_LIST[@]}\"; do\n  PATCH_FILE=\"$PATCH_BASE/$PATCH_NAME.patch\"\n  LOCAL_PATCH=\"./$PATCH_NAME.patch\"\n  if [[ -f \"$PATCH_FILE\" ]]; then\n    echo \"\U0001F7E2 应用补丁: $PATCH_NAME\"\n    cp \"$PATCH_FILE\" \"$LOCAL_PATCH\"\n    patch -p1 -F 3 < \"$LOCAL_PATCH\" || echo \"⚠️ $PATCH_NAME patch失败(已应用/冲突可忽略)\"\n  else\n    echo \"❗ 未找到$PATCH_NAME补丁 (kernel version ${{ github.event.inputs.KERNEL_VERSION }})\"\n  fi\ndone\n"
      - name: 写入SUSFS与ZRAM内核配置及性能优化
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig

          # SUSFS/KSU 基础配置
          echo "# SUSFS/KSU基础配置"                                  >> "$DEFCONFIG"
          echo "CONFIG_KSU=y"                                        >> "$DEFCONFIG"  # 启用KernelSU
          echo "CONFIG_KPM=y"                                        >> "$DEFCONFIG"  # 启用Kernel Patch Manager
          echo "CONFIG_KSU_SUSFS_SUS_SU=n"                           >> "$DEFCONFIG"  # SUSFS su兼容模式（关闭）
          echo "CONFIG_KSU_MANUAL_HOOK=y"                            >> "$DEFCONFIG"  # 手动挂钩
          echo "CONFIG_KSU_SUSFS=y"                                  >> "$DEFCONFIG"  # 启用SUSFS
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"                  >> "$DEFCONFIG"  # Magic Mount特性
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y"                         >> "$DEFCONFIG"  # SUSFS路径支持
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y"                        >> "$DEFCONFIG"  # SUSFS挂载点支持
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"   >> "$DEFCONFIG"  # 自动添加默认挂载
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"          >> "$DEFCONFIG"  # 自动添加BIND挂载
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y"                        >> "$DEFCONFIG"  # 启用SUSFS KSTAT支持
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"                    >> "$DEFCONFIG"  # 关闭SUSFS OverlayFS
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"                       >> "$DEFCONFIG"  # 尝试自动卸载
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG" # BIND挂载自动卸载
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"                      >> "$DEFCONFIG"  # 伪装UNAME
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y"                       >> "$DEFCONFIG"  # 启用日志
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"           >> "$DEFCONFIG"  # 隐藏KSU/SUSFS符号
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"      >> "$DEFCONFIG"  # 伪装cmdline/bootconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"                    >> "$DEFCONFIG"  # 打开重定向支持

          # 如果启用ZRAM，写入ZRAM相关配置
          if [[ "${{ github.event.inputs.ZRAM }}" == "true" ]]; then
            # 启用ZRAM压缩算法支持
            echo "CONFIG_CRYPTO_LZ4KD=y"      >> "$DEFCONFIG"  # LZ4KD压缩算法
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$DEFCONFIG"  # OPLUS定制LZ4K
            echo "CONFIG_ZRAM_WRITEBACK=y"    >> "$DEFCONFIG"  # 启用ZRAM写回支持
          fi

          # 删除check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
      - name: 注入sched_ext调度模块
        if: ${{ github.event.inputs.KERNEL_VERSION == '6.6' }}
        run: |
          set -e
          cd kernel_workspace/kernel_platform/
          git clone --depth=1 https://github.com/HanKuCha/sched_ext.git
          cp -r sched_ext/* common/kernel/sched
          rm -rf sched_ext/.git
          cd common/kernel/sched
      - name: 编译内核
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out gki_defconfig all
          elif [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
            export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
            export PATH="/usr/lib/ccache:$PATH"
            make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld  HOSTLD=ld.lld O=out gki_defconfig all
          else
            cd $GITHUB_WORKSPACE/kernel_workspace
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }}
          fi
      - name: 制作AnyKernel3内核刷机包
        run: |
          set -e
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-no_kpm
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-kpm
          rm -rf AnyKernel3-{kpm,no_kpm}/.git
          rm -f AnyKernel3-{kpm,no_kpm}/push.sh
          KERNEL_OUT_DIRS=(
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          )
          image_path=""
          for dir in "${KERNEL_OUT_DIRS[@]}"; do
            if [[ -f "${dir}Image" ]]; then
              image_path="${dir}Image"
              break
            fi
          done
          if [[ -z "$image_path" ]]; then
            image_path=$(find kernel_workspace/kernel_platform/common/out/ -name "Image" | head -n 1)
          fi
          if [[ -n "$image_path" && -f "$image_path" ]]; then
            cp "$image_path" AnyKernel3-no_kpm/Image
            echo "IMAGE_PATH=$image_path" >> $GITHUB_ENV
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi
      - name: Remove _uv suffix from FEIL
        id: feil_clean
        run: |
          set -e
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"  # 去掉结尾的 _v（如果有）
          clean_feil="${clean_feil%_u}"  # 去掉结尾的 _u（如果有）
          echo "value=$clean_feil" >> $GITHUB_OUTPUT
      - name: 上传AnyKernel3 (No_KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}_NoKPM
          path: AnyKernel3-no_kpm/*
      - name: 应用KPM补丁并制作KPM刷机包
        run: |
          set -e
          echo "使用的 Image 路径是: $IMAGE_PATH"
          cd "$(dirname "$IMAGE_PATH")"
          cp Image $GITHUB_WORKSPACE/AnyKernel3-no_kpm/Image
          curl --retry 3 -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3-kpm/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/kernel
      - name: 上传AnyKernel3 (KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}_KPM
          path: AnyKernel3-kpm/*
      - name: 下载并解压zram内核模块
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          set -e
          sudo apt install -y unzip
          curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | xargs wget -N
          unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module
          zram1="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          zram2="./kernel_workspace/kernel_platform/out/dist/"
          zram3="./kernel_workspace/kernel_platform/out/vendor/oplus/kernel/mm/"
          zram4="./kernel_workspace/device/qcom/${{ github.event.inputs.CPUD }}-kernel/vendor_dlkm/"
          zram5="./kernel_workspace/device/qcom/${{ github.event.inputs.CPUD }}-kernel/system_dlkm/flatten/lib/modules/"
          zram6="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/msm-kernel/mm/oplus_mm/hybridswap_zram/"
          zram7="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/msm-kernel/mm/oplus_bsp_hybridswap_zram/"
          target="./ZRAM-Module/zram/zram.ko"
          for dir in "$zram1" "$zram2" "$zram3" "$zram4" "$zram5" "$zram6" "$zram7"; do
            zram_path=$(find "$dir" -name "zram.ko" | head -n 1)
            [ -n "$zram_path" ] && break
          done
          if [ -z "$zram_path" ]; then
            zram_path=$(find "./kernel_workspace" -name "zram.ko" | head -n 1)
          fi
          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            echo "ZRAM module file located at: $zram_path"
            mkdir -p "$(dirname "$target")"
            if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
              cp "$zram_path" "$target"
            else
              echo "源文件与目标相同，跳过复制"
            fi
          else
            echo "未找到 zram.ko 文件，构建可能失败"
            exit 1
          fi
      - name: 上传ZRAM-Module
        uses: actions/upload-artifact@v4
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        with:
          name: ZRAM-Module_${{ github.event.inputs.KERNEL_VERSION }}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM-Module/*
