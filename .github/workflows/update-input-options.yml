name: Auto-update CPU/FEIL options

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-options:
    runs-on: ubuntu-latest

    env:
      WF_FILE: ".github/workflows/Build-SukiSU-Ultra.yml"
      UPSTREAM_REPO: "OnePlusOSS/kernel_manifest"

    steps:
      - name: Checkout with PAT
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          curl -fsSL \
            "https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64" \
            -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      - name: Generate CPU & FEIL lists
        shell: bash
        run: |
          set -Eeuo pipefail
          # 1) 拉取所有分支
          git ls-remote --heads "https://github.com/${UPSTREAM_REPO}.git" \
            | sed 's#refs/heads/##' > branches.txt

          # 2) CPU 列表（只保留 sm + 数字）
          grep -E 'sm[0-9]+' branches.txt | sed 's#.*/##' | sort -u > cpu_list.txt

          # 3) FEIL 列表（收集 .xml 文件名，不含后缀）
          : > feil_list.txt
          while IFS= read -r branch; do
            # 跳过空行和只包含空白字符的行
            [[ -z "${branch// }" ]] && continue

            # 对 '/' 做 URL 转义
            ref_enc=${branch//\//%2F}
            # 确保编码后的引用不为空且不包含无效字符
            [[ -z "$ref_enc" || "$ref_enc" =~ [[:space:]] ]] && continue

            api="https://api.github.com/repos/${UPSTREAM_REPO}/git/trees/${ref_enc}?recursive=1"
            resp="$(curl -sS \
              -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "$api" || true)"

            # 检查 curl 响应是否有效
            [[ -z "$resp" ]] && continue

            # 提取所有 xml 路径
            paths=$(jq -r '(.tree // [])[]
                          | select(.type=="blob" and (.path | strings | endswith(".xml")))
                          | .path' <<<"$resp" 2>/dev/null || true)

            # 如果有结果，再做 basename 提取并写入
            if [[ -n "$paths" ]]; then
              while IFS= read -r p; do
                [[ -n "$p" ]] || continue
                # basename -s .xml
                name=$(basename "$p" .xml)
                [[ -n "$name" ]] && echo "$name" >> feil_list.txt
              done <<<"$paths"
            fi

            sleep 0.2
          done < branches.txt

          # 确保 feil_list.txt 存在并排序去重
          if [[ -f feil_list.txt ]]; then
            sort -u feil_list.txt -o feil_list.txt
          fi

      - name: Update workflow_dispatch inputs
        shell: bash
        run: |
          set -Eeuo pipefail
          for NAME in CPU FEIL; do
            LIST_FILE="${NAME,,}_list.txt"
            
            # 检查文件是否存在且非空
            if [[ ! -f "$LIST_FILE" || ! -s "$LIST_FILE" ]]; then
              echo "Warning: $LIST_FILE does not exist or is empty, skipping $NAME"
              continue
            fi
            
            # 清空 options
            yq eval -i ".on.workflow_dispatch.inputs.${NAME}.options = []" "$WF_FILE"

            # 重新填充 options
            while read -r item; do
              # 跳过空行
              [[ -n "${item// }" ]] && yq eval -i ".on.workflow_dispatch.inputs.${NAME}.options += [\"${item}\"]" "$WF_FILE"
            done < "$LIST_FILE"

            # 校验并更新 default
            DEF_PATH=".on.workflow_dispatch.inputs.${NAME}.default"
            CUR=$(yq eval -r "${DEF_PATH} // \"\"" "$WF_FILE")
            if [[ -n "$CUR" ]] && ! grep -qxF "$CUR" "$LIST_FILE" 2>/dev/null; then
              NEW=$(head -n1 "$LIST_FILE" 2>/dev/null | tr -d '[:space:]')
              [[ -n "$NEW" ]] && yq eval -i "${DEF_PATH} = \"${NEW}\"" "$WF_FILE"
            elif [[ -z "$CUR" ]]; then
              # 如果当前 default 为空，设置第一个选项为默认值
              NEW=$(head -n1 "$LIST_FILE" 2>/dev/null | tr -d '[:space:]')
              [[ -n "$NEW" ]] && yq eval -i "${DEF_PATH} = \"${NEW}\"" "$WF_FILE"
            fi
          done

      - name: Commit & push if changed
        shell: bash
        run: |
          set -Eeuo pipefail
          # 如果没有变更就退出
          git diff --quiet || {
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$WF_FILE"
            git commit -m "chore: auto-update CPU and FEIL options"
            git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}
            git push origin HEAD:main
          }
