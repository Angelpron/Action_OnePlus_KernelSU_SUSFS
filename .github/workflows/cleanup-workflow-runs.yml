name: Cleanup Workflow Runs

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: '指定要清理的 workflow 文件名（如 Build-SukiSU-Ultra-lz4kd.yml，留空为全部）'
        required: false
        default: ''
      clean_success:
        description: '是否清理成功的记录'
        required: false
        default: false
        type: boolean
      keep_latest:
        description: '保留最近 N 条'
        required: false
        default: 0
        type: number

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 安装 GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: 清理 Workflow Runs（智能文件名匹配）
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN != '' && secrets.PAT_TOKEN || github.token }}
          WORKFLOW_FILE: ${{ github.event.inputs.workflow_file }}
          CLEAN_SUCCESS: ${{ github.event.inputs.clean_success }}
          KEEP_LATEST: ${{ github.event.inputs.keep_latest }}
        run: |
          info()   { echo -e "\033[1;34m[INFO]\033[0m $*"; }
          warn()   { echo -e "\033[1;33m[WARN]\033[0m $*"; }
          error()  { echo -e "\033[1;31m[ERROR]\033[0m $*"; }

          info "Workflow Runs Cleanup Started"
          info "GH_TOKEN 使用: $([ -n "${GH_TOKEN}" ] && echo '自定义 PAT_TOKEN' || echo '默认 github.token')"
          info "参数: workflow_file=${WORKFLOW_FILE} clean_success=${CLEAN_SUCCESS} keep_latest=${KEEP_LATEST}"

          REPO="${{ github.repository }}"
          info "当前仓库：$REPO"

          # 获取全部 completed runs（最多 1000 条）
          mapfile -t run_lines < <(gh run list --repo "$REPO" --status completed --limit 1000 --json databaseId,name,conclusion,createdAt,headBranch -q '.[] | "\(.databaseId):\(.name):\(.conclusion):\(.createdAt):\(.headBranch)"')

          # 智能筛选：支持 workflow 文件名相关的所有 run（包括已删除文件的历史）
          filtered_run_lines=()
          if [ -z "$WORKFLOW_FILE" ]; then
            info "未指定 workflow 文件名，处理全部 completed runs"
            filtered_run_lines=("${run_lines[@]}")
          else
            info "仅处理与 '${WORKFLOW_FILE}' 相关的 runs"
            # 文件名不带扩展名
            wf_base="${WORKFLOW_FILE%.yml}"
            wf_base_space="${wf_base//-/ }"
            wf_base_under="${wf_base//-/}"
            for line in "${run_lines[@]}"; do
              run_name="${line#*:}"; run_name="${run_name%%:*}"
              # 智能匹配：文件名、workflow name、全路径、空格连字符混用
              if [[ "$run_name" == *"$WORKFLOW_FILE"* ]] || \
                 [[ "$run_name" == *"$wf_base"* ]] || \
                 [[ "$run_name" == *"$wf_base_space"* ]] || \
                 [[ "$run_name" == *"$wf_base_under"* ]] || \
                 [[ "$run_name" == *".github/workflows/$WORKFLOW_FILE"* ]]; then
                filtered_run_lines+=("$line")
              fi
            done
            info "筛选后符合条件的 run 数量：${#filtered_run_lines[@]}"
          fi

          total_runs="${#filtered_run_lines[@]}"
          info "最终待处理 run 条数：$total_runs"

          count=0
          for ((i=total_runs-1; i>=0; i--)); do
            IFS=: read -r run_id run_name conclusion created branch <<<"${filtered_run_lines[i]}"
            count=$((count+1))
            if [ "$count" -le "$KEEP_LATEST" ]; then
              info "保留第 $count 条记录 run_id=$run_id name=$run_name branch=$branch created=$created 结论=$conclusion"
              continue
            fi

            if [ "$CLEAN_SUCCESS" = "false" ] && [ "$conclusion" = "success" ]; then
              info "跳过成功 run: run_id=$run_id name=$run_name"
              continue
            fi

            info "尝试删除: run_id=$run_id name=$run_name branch=$branch created=$created 结论=$conclusion"
            if gh run delete "$run_id" --repo "$REPO"; then
              info "已删除 run $run_id"
            else
              error "删除 run $run_id 失败"
            fi
          done

          info "Workflow Runs Cleanup Finished"
